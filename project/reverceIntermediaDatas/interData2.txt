Алфавит и сгенерированные специальные кода каждого символа:
a - 0000000
b - 0000001
c - 0000010
d - 0000011
e - 0000100
f - 0000101
g - 0000110
h - 0000111
i - 0001000
j - 0001001
k - 0001010
l - 0001011
m - 000110
n - 000111
o - 001000
p - 001001
q - 001010
r - 001011
s - 001100
t - 001101
u - 001110
v - 001111
w - 010000
x - 010001
y - 010010
z - 010011
A - 010100
B - 010101
C - 010110
D - 010111
E - 011000
F - 011001
G - 011010
H - 011011
I - 011100
J - 011101
K - 011110
L - 011111
M - 100000
N - 100001
O - 100010
P - 100011
Q - 100100
R - 100101
S - 100110
T - 100111
U - 101000
V - 101001
W - 101010
X - 101011
Y - 101100
Z - 101101
0 - 101110
1 - 101111
2 - 110000
3 - 110001
4 - 110010
5 - 110011
6 - 110100
7 - 110101
8 - 110110
9 - 110111
. - 111000
, - 111001
! - 111010
? - 111011
: - 111100
( - 111101
) - 111110
  - 111111


Промежуточные данные:
Начало работы декодировщика: на вход декодеру подается последовательность бит:
0000000000000010000101101000001010011000000011011011001000111010
---------------------------------
Текущее дерево кодировщика:
(0[\0])

Оставшееся нераскодированное сообщение: 0000000000000010000101101000001010011000000011011011001000111010

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит:  привел декодера к узлу с символом '\0' - пустым символом =>
=> по следующим битам нераскодированной части сообщения определяется символ из специальной кодировки

Оставшееся нераскодированное сообщение: 0000000000000010000101101000001010011000000011011011001000111010
Следующий набор бит: 0000000 привел декодера к узлу с символом 'a' в дереве специальной кодировки, который и будет очередным результатом декодирования

К узлу с пустым символом добавляются два новых узла:
Левый сын - новый пустой узел, а правый - узел с новым добавленным символом: 'a':
       (0)      
(0[\0])   (1[a])

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
       (1)      
(0[\0])   (1[a])

Текущий результат декодирования сообщения: 'a'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
       (1)      
(0[\0])   (1[a])

Оставшееся нераскодированное сообщение: 000000010000101101000001010011000000011011011001000111010

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 0 привел декодера к узлу с символом '\0' - пустым символом =>
=> по следующим битам нераскодированной части сообщения определяется символ из специальной кодировки

Оставшееся нераскодированное сообщение: 00000010000101101000001010011000000011011011001000111010
Следующий набор бит: 0000001 привел декодера к узлу с символом 'b' в дереве специальной кодировки, который и будет очередным результатом декодирования

К узлу с пустым символом добавляются два новых узла:
Левый сын - новый пустой узел, а правый - узел с новым добавленным символом: 'b':
                (1)      
       (0)         (1[a])
(0[\0])   (1[b])         

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
                (2)      
       (1)         (1[a])
(0[\0])   (1[b])         

Текущий результат декодирования сообщения: 'ab'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
                (2)      
       (1)         (1[a])
(0[\0])   (1[b])         

Оставшееся нераскодированное сообщение: 0000101101000001010011000000011011011001000111010

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 00 привел декодера к узлу с символом '\0' - пустым символом =>
=> по следующим битам нераскодированной части сообщения определяется символ из специальной кодировки

Оставшееся нераскодированное сообщение: 00101101000001010011000000011011011001000111010
Следующий набор бит: 001011 привел декодера к узлу с символом 'r' в дереве специальной кодировки, который и будет очередным результатом декодирования

К узлу с пустым символом добавляются два новых узла:
Левый сын - новый пустой узел, а правый - узел с новым добавленным символом: 'r':
                         (2)      
                (1)         (1[a])
       (0)         (1[b])         
(0[\0])   (1[r])                  

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
                         (3)      
                (2)         (1[a])
       (1)         (1[b])         
(0[\0])   (1[r])                  

Требуется перевесить ветки:
                (2)      
       (1)         (1[b])
(0[\0])   (1[r])         

и

(1[a])

Повторный пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с перевешанными ветками и с пересчитанными весами:
      (3)                         
(1[a])                   (2)      
                (1)         (1[b])
         (0[\0])   (1[r])         

Текущий результат декодирования сообщения: 'abr'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
      (3)                         
(1[a])                   (2)      
                (1)         (1[b])
         (0[\0])   (1[r])         

Оставшееся нераскодированное сообщение: 01000001010011000000011011011001000111010

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 0 привел декодера к узлу с символом 'a', который и будет очередным результатом декодирования
Вес узла с этим символом в дереве учеличивается на 1:
      (3)                         
(2[a])                   (2)      
                (1)         (1[b])
         (0[\0])   (1[r])         

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
      (4)                         
(2[a])                   (2)      
                (1)         (1[b])
         (0[\0])   (1[r])         

Текущий результат декодирования сообщения: 'abra'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
      (4)                         
(2[a])                   (2)      
                (1)         (1[b])
         (0[\0])   (1[r])         

Оставшееся нераскодированное сообщение: 1000001010011000000011011011001000111010

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 100 привел декодера к узлу с символом '\0' - пустым символом =>
=> по следующим битам нераскодированной части сообщения определяется символ из специальной кодировки

Оставшееся нераскодированное сообщение: 0001010011000000011011011001000111010
Следующий набор бит: 0001010 привел декодера к узлу с символом 'k' в дереве специальной кодировки, который и будет очередным результатом декодирования

К узлу с пустым символом добавляются два новых узла:
Левый сын - новый пустой узел, а правый - узел с новым добавленным символом: 'k':
      (4)                                  
(2[a])                            (2)      
                         (1)         (1[b])
                (0)         (1[r])         
         (0[\0])   (1[k])                  

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
      (5)                                  
(2[a])                            (3)      
                         (2)         (1[b])
                (1)         (1[r])         
         (0[\0])   (1[k])                  

Требуется перевесить ветки:
                (2)      
       (1)         (1[r])
(0[\0])   (1[k])         

и

(1[b])

Повторный пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с перевешанными ветками и с пересчитанными весами:
      (5)                                  
(2[a])         (3)                         
         (1[b])                   (2)      
                         (1)         (1[r])
                  (0[\0])   (1[k])         

Текущий результат декодирования сообщения: 'abrak'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
      (5)                                  
(2[a])         (3)                         
         (1[b])                   (2)      
                         (1)         (1[r])
                  (0[\0])   (1[k])         

Оставшееся нераскодированное сообщение: 011000000011011011001000111010

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 0 привел декодера к узлу с символом 'a', который и будет очередным результатом декодирования
Вес узла с этим символом в дереве учеличивается на 1:
      (5)                                  
(3[a])         (3)                         
         (1[b])                   (2)      
                         (1)         (1[r])
                  (0[\0])   (1[k])         

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
      (6)                                  
(3[a])         (3)                         
         (1[b])                   (2)      
                         (1)         (1[r])
                  (0[\0])   (1[k])         

Текущий результат декодирования сообщения: 'abraka'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
      (6)                                  
(3[a])         (3)                         
         (1[b])                   (2)      
                         (1)         (1[r])
                  (0[\0])   (1[k])         

Оставшееся нераскодированное сообщение: 11000000011011011001000111010

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 1100 привел декодера к узлу с символом '\0' - пустым символом =>
=> по следующим битам нераскодированной части сообщения определяется символ из специальной кодировки

Оставшееся нераскодированное сообщение: 0000011011011001000111010
Следующий набор бит: 0000011 привел декодера к узлу с символом 'd' в дереве специальной кодировки, который и будет очередным результатом декодирования

К узлу с пустым символом добавляются два новых узла:
Левый сын - новый пустой узел, а правый - узел с новым добавленным символом: 'd':
      (6)                                           
(3[a])         (3)                                  
         (1[b])                            (2)      
                                  (1)         (1[r])
                         (0)         (1[k])         
                  (0[\0])   (1[d])                  

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
      (7)                                           
(3[a])         (4)                                  
         (1[b])                            (3)      
                                  (2)         (1[r])
                         (1)         (1[k])         
                  (0[\0])   (1[d])                  

Требуется перевесить ветки:
                (2)      
       (1)         (1[k])
(0[\0])   (1[d])         

и

(1[b])

Повторный пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с перевешанными ветками и с пересчитанными весами:
      (7)                                           
(3[a])                            (4)               
                         (2)               (2)      
                (1)         (1[k])   (1[b])   (1[r])
         (0[\0])   (1[d])                           

Текущий результат декодирования сообщения: 'abrakad'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
      (7)                                           
(3[a])                            (4)               
                         (2)               (2)      
                (1)         (1[k])   (1[b])   (1[r])
         (0[\0])   (1[d])                           

Оставшееся нераскодированное сообщение: 011011001000111010

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 0 привел декодера к узлу с символом 'a', который и будет очередным результатом декодирования
Вес узла с этим символом в дереве учеличивается на 1:
      (7)                                           
(4[a])                            (4)               
                         (2)               (2)      
                (1)         (1[k])   (1[b])   (1[r])
         (0[\0])   (1[d])                           

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
      (8)                                           
(4[a])                            (4)               
                         (2)               (2)      
                (1)         (1[k])   (1[b])   (1[r])
         (0[\0])   (1[d])                           

Текущий результат декодирования сообщения: 'abrakada'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
      (8)                                           
(4[a])                            (4)               
                         (2)               (2)      
                (1)         (1[k])   (1[b])   (1[r])
         (0[\0])   (1[d])                           

Оставшееся нераскодированное сообщение: 11011001000111010

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 110 привел декодера к узлу с символом 'b', который и будет очередным результатом декодирования
Вес узла с этим символом в дереве учеличивается на 1:
      (8)                                           
(4[a])                            (4)               
                         (2)               (2)      
                (1)         (1[k])   (2[b])   (1[r])
         (0[\0])   (1[d])                           

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
      (9)                                           
(4[a])                            (5)               
                         (2)               (3)      
                (1)         (1[k])   (2[b])   (1[r])
         (0[\0])   (1[d])                           

Требуется перевесить ветки:
(2[b])

и

(1[r])

Повторный пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с перевешанными ветками и с пересчитанными весами:
      (9)                                           
(4[a])                            (5)               
                         (2)               (3)      
                (1)         (1[k])   (1[r])   (2[b])
         (0[\0])   (1[d])                           

Текущий результат декодирования сообщения: 'abrakadab'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
      (9)                                           
(4[a])                            (5)               
                         (2)               (3)      
                (1)         (1[k])   (1[r])   (2[b])
         (0[\0])   (1[d])                           

Оставшееся нераскодированное сообщение: 11001000111010

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 110 привел декодера к узлу с символом 'r', который и будет очередным результатом декодирования
Вес узла с этим символом в дереве учеличивается на 1:
      (9)                                           
(4[a])                            (5)               
                         (2)               (3)      
                (1)         (1[k])   (2[r])   (2[b])
         (0[\0])   (1[d])                           

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
      (10)                                           
(4[a])                             (6)               
                          (2)               (4)      
                 (1)         (1[k])   (2[r])   (2[b])
          (0[\0])   (1[d])                           

Текущий результат декодирования сообщения: 'abrakadabr'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
      (10)                                           
(4[a])                             (6)               
                          (2)               (4)      
                 (1)         (1[k])   (2[r])   (2[b])
          (0[\0])   (1[d])                           

Оставшееся нераскодированное сообщение: 01000111010

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 0 привел декодера к узлу с символом 'a', который и будет очередным результатом декодирования
Вес узла с этим символом в дереве учеличивается на 1:
      (10)                                           
(5[a])                             (6)               
                          (2)               (4)      
                 (1)         (1[k])   (2[r])   (2[b])
          (0[\0])   (1[d])                           

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
      (11)                                           
(5[a])                             (6)               
                          (2)               (4)      
                 (1)         (1[k])   (2[r])   (2[b])
          (0[\0])   (1[d])                           

Текущий результат декодирования сообщения: 'abrakadabra'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
      (11)                                           
(5[a])                             (6)               
                          (2)               (4)      
                 (1)         (1[k])   (2[r])   (2[b])
          (0[\0])   (1[d])                           

Оставшееся нераскодированное сообщение: 1000111010

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 1000 привел декодера к узлу с символом '\0' - пустым символом =>
=> по следующим битам нераскодированной части сообщения определяется символ из специальной кодировки

Оставшееся нераскодированное сообщение: 111010
Следующий набор бит: 111010 привел декодера к узлу с символом '!' в дереве специальной кодировки, который и будет очередным результатом декодирования

К узлу с пустым символом добавляются два новых узла:
Левый сын - новый пустой узел, а правый - узел с новым добавленным символом: '!':
      (11)                                                    
(5[a])                                      (6)               
                                   (2)               (4)      
                          (1)         (1[k])   (2[r])   (2[b])
                 (0)         (1[d])                           
          (0[\0])   (1[!])                                    

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
      (12)                                                    
(5[a])                                      (7)               
                                   (3)               (4)      
                          (2)         (1[k])   (2[r])   (2[b])
                 (1)         (1[d])                           
          (0[\0])   (1[!])                                    

Требуется перевесить ветки:
                (2)      
       (1)         (1[d])
(0[\0])   (1[!])         

и

(1[k])

Повторный пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с перевешанными ветками и с пересчитанными весами:
      (12)                                                    
(5[a])                                      (7)               
                (3)                                  (4)      
          (1[k])                   (2)         (2[r])   (2[b])
                          (1)         (1[d])                  
                   (0[\0])   (1[!])                           

Текущий результат декодирования сообщения: 'abrakadabra!'
---------------------------------
Конец работы декодировщика.
