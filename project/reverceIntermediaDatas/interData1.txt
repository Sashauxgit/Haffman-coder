Алфавит и сгенерированные специальные кода каждого символа:
a - 0000000
b - 0000001
c - 0000010
d - 0000011
e - 0000100
f - 0000101
g - 0000110
h - 0000111
i - 0001000
j - 0001001
k - 0001010
l - 0001011
m - 000110
n - 000111
o - 001000
p - 001001
q - 001010
r - 001011
s - 001100
t - 001101
u - 001110
v - 001111
w - 010000
x - 010001
y - 010010
z - 010011
A - 010100
B - 010101
C - 010110
D - 010111
E - 011000
F - 011001
G - 011010
H - 011011
I - 011100
J - 011101
K - 011110
L - 011111
M - 100000
N - 100001
O - 100010
P - 100011
Q - 100100
R - 100101
S - 100110
T - 100111
U - 101000
V - 101001
W - 101010
X - 101011
Y - 101100
Z - 101101
0 - 101110
1 - 101111
2 - 110000
3 - 110001
4 - 110010
5 - 110011
6 - 110100
7 - 110101
8 - 110110
9 - 110111
. - 111000
, - 111001
! - 111010
? - 111011
: - 111100
( - 111101
) - 111110
  - 111111


Промежуточные данные:
Начало работы декодировщика: на вход декодеру подается последовательность бит:
000110000000001010011111110001010010000001110101110110111110
---------------------------------
Текущее дерево кодировщика:
(0[\0])

Оставшееся нераскодированное сообщение: 000110000000001010011111110001010010000001110101110110111110

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит:  привел декодера к узлу с символом '\0' - пустым символом =>
=> по следующим битам нераскодированной части сообщения определяется символ из специальной кодировки

Оставшееся нераскодированное сообщение: 000110000000001010011111110001010010000001110101110110111110
Следующий набор бит: 000110 привел декодера к узлу с символом 'm' в дереве специальной кодировки, который и будет очередным результатом декодирования

К узлу с пустым символом добавляются два новых узла:
Левый сын - новый пустой узел, а правый - узел с новым добавленным символом: 'm':
       (0)      
(0[\0])   (1[m])

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
       (1)      
(0[\0])   (1[m])

Текущий результат декодирования сообщения: 'm'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
       (1)      
(0[\0])   (1[m])

Оставшееся нераскодированное сообщение: 000000001010011111110001010010000001110101110110111110

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 0 привел декодера к узлу с символом '\0' - пустым символом =>
=> по следующим битам нераскодированной части сообщения определяется символ из специальной кодировки

Оставшееся нераскодированное сообщение: 00000001010011111110001010010000001110101110110111110
Следующий набор бит: 0000000 привел декодера к узлу с символом 'a' в дереве специальной кодировки, который и будет очередным результатом декодирования

К узлу с пустым символом добавляются два новых узла:
Левый сын - новый пустой узел, а правый - узел с новым добавленным символом: 'a':
                (1)      
       (0)         (1[m])
(0[\0])   (1[a])         

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
                (2)      
       (1)         (1[m])
(0[\0])   (1[a])         

Текущий результат декодирования сообщения: 'ma'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
                (2)      
       (1)         (1[m])
(0[\0])   (1[a])         

Оставшееся нераскодированное сообщение: 1010011111110001010010000001110101110110111110

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 1 привел декодера к узлу с символом 'm', который и будет очередным результатом декодирования
Вес узла с этим символом в дереве учеличивается на 1:
                (2)      
       (1)         (2[m])
(0[\0])   (1[a])         

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
                (3)      
       (1)         (2[m])
(0[\0])   (1[a])         

Текущий результат декодирования сообщения: 'mam'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
                (3)      
       (1)         (2[m])
(0[\0])   (1[a])         

Оставшееся нераскодированное сообщение: 010011111110001010010000001110101110110111110

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 01 привел декодера к узлу с символом 'a', который и будет очередным результатом декодирования
Вес узла с этим символом в дереве учеличивается на 1:
                (3)      
       (1)         (2[m])
(0[\0])   (2[a])         

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
                (4)      
       (2)         (2[m])
(0[\0])   (2[a])         

Текущий результат декодирования сообщения: 'mama'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
                (4)      
       (2)         (2[m])
(0[\0])   (2[a])         

Оставшееся нераскодированное сообщение: 0011111110001010010000001110101110110111110

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 00 привел декодера к узлу с символом '\0' - пустым символом =>
=> по следующим битам нераскодированной части сообщения определяется символ из специальной кодировки

Оставшееся нераскодированное сообщение: 11111110001010010000001110101110110111110
Следующий набор бит: 111111 привел декодера к узлу с символом ' ' в дереве специальной кодировки, который и будет очередным результатом декодирования

К узлу с пустым символом добавляются два новых узла:
Левый сын - новый пустой узел, а правый - узел с новым добавленным символом: ' ':
                         (4)      
                (2)         (2[m])
       (0)         (2[a])         
(0[\0])   (1[ ])                  

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
                         (5)      
                (3)         (2[m])
       (1)         (2[a])         
(0[\0])   (1[ ])                  

Требуется перевесить ветки:
                (3)      
       (1)         (2[a])
(0[\0])   (1[ ])         

и

(2[m])

Повторный пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с перевешанными ветками и с пересчитанными весами:
      (5)                         
(2[m])                   (3)      
                (1)         (2[a])
         (0[\0])   (1[ ])         

Текущий результат декодирования сообщения: 'mama '
---------------------------------
---------------------------------
Текущее дерево кодировщика:
      (5)                         
(2[m])                   (3)      
                (1)         (2[a])
         (0[\0])   (1[ ])         

Оставшееся нераскодированное сообщение: 10001010010000001110101110110111110

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 100 привел декодера к узлу с символом '\0' - пустым символом =>
=> по следующим битам нераскодированной части сообщения определяется символ из специальной кодировки

Оставшееся нераскодированное сообщение: 01010010000001110101110110111110
Следующий набор бит: 010100 привел декодера к узлу с символом 'A' в дереве специальной кодировки, который и будет очередным результатом декодирования

К узлу с пустым символом добавляются два новых узла:
Левый сын - новый пустой узел, а правый - узел с новым добавленным символом: 'A':
      (5)                                  
(2[m])                            (3)      
                         (1)         (2[a])
                (0)         (1[ ])         
         (0[\0])   (1[A])                  

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
      (6)                                  
(2[m])                            (4)      
                         (2)         (2[a])
                (1)         (1[ ])         
         (0[\0])   (1[A])                  

Текущий результат декодирования сообщения: 'mama A'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
      (6)                                  
(2[m])                            (4)      
                         (2)         (2[a])
                (1)         (1[ ])         
         (0[\0])   (1[A])                  

Оставшееся нераскодированное сообщение: 10000001110101110110111110

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 1000 привел декодера к узлу с символом '\0' - пустым символом =>
=> по следующим битам нераскодированной части сообщения определяется символ из специальной кодировки

Оставшееся нераскодированное сообщение: 0001110101110110111110
Следующий набор бит: 000111 привел декодера к узлу с символом 'n' в дереве специальной кодировки, который и будет очередным результатом декодирования

К узлу с пустым символом добавляются два новых узла:
Левый сын - новый пустой узел, а правый - узел с новым добавленным символом: 'n':
      (6)                                           
(2[m])                                     (4)      
                                  (2)         (2[a])
                         (1)         (1[ ])         
                (0)         (1[A])                  
         (0[\0])   (1[n])                           

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
      (7)                                           
(2[m])                                     (5)      
                                  (3)         (2[a])
                         (2)         (1[ ])         
                (1)         (1[A])                  
         (0[\0])   (1[n])                           

Требуется перевесить ветки:
                (2)      
       (1)         (1[A])
(0[\0])   (1[n])         

и

(1[ ])

Повторный пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с перевешанными ветками и с пересчитанными весами:
      (7)                                           
(2[m])                                     (5)      
               (3)                            (2[a])
         (1[ ])                   (2)               
                         (1)         (1[A])         
                  (0[\0])   (1[n])                  

Требуется перевесить ветки:
      (3)                         
(1[ ])                   (2)      
                (1)         (1[A])
         (0[\0])   (1[n])         

и

(2[m])

Повторный пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с перевешанными ветками и с пересчитанными весами:
                                  (7)               
      (3)                                  (4)      
(1[ ])                   (2)         (2[m])   (2[a])
                (1)         (1[A])                  
         (0[\0])   (1[n])                           

Текущий результат декодирования сообщения: 'mama An'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
                                  (7)               
      (3)                                  (4)      
(1[ ])                   (2)         (2[m])   (2[a])
                (1)         (1[A])                  
         (0[\0])   (1[n])                           

Оставшееся нераскодированное сообщение: 0101110110111110

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 0101 привел декодера к узлу с символом 'n', который и будет очередным результатом декодирования
Вес узла с этим символом в дереве учеличивается на 1:
                                  (7)               
      (3)                                  (4)      
(1[ ])                   (2)         (2[m])   (2[a])
                (1)         (1[A])                  
         (0[\0])   (2[n])                           

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
                                  (8)               
      (4)                                  (4)      
(1[ ])                   (3)         (2[m])   (2[a])
                (2)         (1[A])                  
         (0[\0])   (2[n])                           

Требуется перевесить ветки:
       (2)      
(0[\0])   (2[n])

и

(1[ ])

Повторный пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с перевешанными ветками и с пересчитанными весами:
                                  (8)               
                (4)                        (4)      
       (2)               (2)         (2[m])   (2[a])
(0[\0])   (2[n])   (1[ ])   (1[A])                  

Требуется перевесить ветки:
(2[n])

и

(1[A])

Повторный пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с перевешанными ветками и с пересчитанными весами:
                                  (8)               
                (4)                        (4)      
       (1)               (3)         (2[m])   (2[a])
(0[\0])   (1[A])   (1[ ])   (2[n])                  

Требуется перевесить ветки:
(2[n])

и

       (1)      
(0[\0])   (1[A])

Повторный пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с перевешанными ветками и с пересчитанными весами:
                                  (8)               
      (4)                                  (4)      
(2[n])         (2)                   (2[m])   (2[a])
         (1[ ])          (1)                        
                  (0[\0])   (1[A])                  

Текущий результат декодирования сообщения: 'mama Ann'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
                                  (8)               
      (4)                                  (4)      
(2[n])         (2)                   (2[m])   (2[a])
         (1[ ])          (1)                        
                  (0[\0])   (1[A])                  

Оставшееся нераскодированное сообщение: 110110111110

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 11 привел декодера к узлу с символом 'a', который и будет очередным результатом декодирования
Вес узла с этим символом в дереве учеличивается на 1:
                                  (8)               
      (4)                                  (4)      
(2[n])         (2)                   (2[m])   (3[a])
         (1[ ])          (1)                        
                  (0[\0])   (1[A])                  

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
                                  (9)               
      (4)                                  (5)      
(2[n])         (2)                   (2[m])   (3[a])
         (1[ ])          (1)                        
                  (0[\0])   (1[A])                  

Текущий результат декодирования сообщения: 'mama Anna'
---------------------------------
---------------------------------
Текущее дерево кодировщика:
                                  (9)               
      (4)                                  (5)      
(2[n])         (2)                   (2[m])   (3[a])
         (1[ ])          (1)                        
                  (0[\0])   (1[A])                  

Оставшееся нераскодированное сообщение: 0110111110

По первым битам нераскодированной части сообщения строится путь в дереве Хаффмана до тех пор, пока не встретится лист
Следующий набор бит: 0110 привел декодера к узлу с символом '\0' - пустым символом =>
=> по следующим битам нераскодированной части сообщения определяется символ из специальной кодировки

Оставшееся нераскодированное сообщение: 111110
Следующий набор бит: 111110 привел декодера к узлу с символом ')' в дереве специальной кодировки, который и будет очередным результатом декодирования

К узлу с пустым символом добавляются два новых узла:
Левый сын - новый пустой узел, а правый - узел с новым добавленным символом: ')':
                                           (9)               
      (4)                                           (5)      
(2[n])         (2)                            (2[m])   (3[a])
         (1[ ])                   (1)                        
                         (0)         (1[A])                  
                  (0[\0])   (1[)])                           

Производится пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с пересчитанными весами:
                                           (10)               
      (5)                                            (5)      
(2[n])         (3)                             (2[m])   (3[a])
         (1[ ])                   (2)                         
                         (1)         (1[A])                   
                  (0[\0])   (1[)])                            

Требуется перевесить ветки:
      (3)                         
(1[ ])                   (2)      
                (1)         (1[A])
         (0[\0])   (1[)])         

и

(2[m])

Повторный пересчет всех весов и перевешивание дерева в случае необходимости:
Дерево с перевешанными ветками и с пересчитанными весами:
               (10)                                           
      (4)                                            (6)      
(2[n])   (2[m])          (3)                            (3[a])
                   (1[ ])                   (2)               
                                   (1)         (1[A])         
                            (0[\0])   (1[)])                  

Текущий результат декодирования сообщения: 'mama Anna)'
---------------------------------
Конец работы декодировщика.
